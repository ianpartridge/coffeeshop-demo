services:
  - docker

os: linux

install:
  - mkdir -p ~/bin && export PATH=~/bin:$PATH
    # Install kind
  - curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/v0.6.0/kind-$(uname)-amd64 && chmod +x ./kind && mv ./kind ~/bin
    # Install kubectl
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl && chmod +x ./kubectl && mv ./kubectl ~/bin

script:
    # Build docker images for the services
  - ./build.sh
    # Start a local K8s cluster using kind, configured with a local Docker registry
  - ./.ci/local-cluster.sh
    # Push images to local registry
  - ./.ci/local-registry.sh
    # Update deployments to reference the local registry
  - ./.ci/replace-refs.sh
    # Install kafka via Strimzi
  - ./start-strimzi.sh
    # Strimzi Operator will create a zookeeper and kafka cluster from our CR manifest.
    # We need to wait for each of the components to be ready (in the right order) before
    # continuing to deploy our app. Wait for the operator itself, then zookeeper, and 
    # finally kafka (which won't be created until zookeeper is ready).
    # 1. Wait for strimzi operator to be ready
  - export PODNAME=`kubectl get pod -l name=strimzi-cluster-operator -o jsonpath="{.items[0].metadata.name}" -n kafka` && echo $PODNAME
  - kubectl wait --for=condition=Ready pod $PODNAME -n kafka --timeout=180s || kubectl logs $PODNAME -n kafka
    # 2. Wait for zookeeper to be ready
  - export PODNAME=`kubectl get pod -l strimzi.io/name=kafka-cluster-zookeeper -o jsonpath="{.items[0].metadata.name}" -n kafka` && echo $PODNAME
  - kubectl wait --for=condition=Ready pod $PODNAME -n kafka --timeout=180s || kubectl logs $PODNAME -n kafka
    # 3. Wait for kafka to be ready
  - export PODNAME=`kubectl get pod -l strimzi.io/name=kafka-cluster-kafka -o jsonpath="{.items[0].metadata.name}" -n kafka` && echo $PODNAME
  - kubectl wait --for=condition=Ready pod $PODNAME -n kafka --timeout=180s || kubectl logs $PODNAME -n kafka
    # 4. Display overall system state for kafka namespace
  - kubectl get all -n kafka
    # Deploy to local cluster
  - ./apply-kubernetes.sh
    # Wait for all pods to be ready
  - export PODNAME=`kubectl get pod -l app=barista-kafka -o jsonpath="{.items[0].metadata.name}" -n coffeeshop-demo`
  - kubectl wait --for=condition=Ready pod -l app=barista-kafka -n coffeeshop-demo --timeout=120s || kubectl logs $PODNAME -n coffeeshop-demo
  - export PODNAME=`kubectl get pod -l app=barista-http -o jsonpath="{.items[0].metadata.name}" -n coffeeshop-demo`
  - kubectl wait --for=condition=Ready pod -l app=barista-http -n coffeeshop-demo --timeout=120s || kubectl logs $PODNAME -n coffeeshop-demo
  - export PODNAME=`kubectl get pod -l app=coffeeshop-service -o jsonpath="{.items[0].metadata.name}" -n coffeeshop-demo`
  - kubectl wait --for=condition=Ready pod -l app=coffeeshop-service -n coffeeshop-demo --timeout=120s || kubectl logs $PODNAME -n coffeeshop-demo
    # Display overall system state
  - kubectl get all -n coffeeshop-demo
    # Forward local port
  - kubectl port-forward service/coffeeshop-service 8080:8080 -n coffeeshop-demo &
    # Wait for port forwarding, test system
  - sleep 5 && ./ci-test.sh
